# 📌 1. نصب کتابخانه‌های مورد نیاز
!pip install lightgbm xgboost openpyxl scikit-learn optuna matplotlib seaborn --quiet

# 📌 2. importها
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMClassifier
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix, f1_score
from google.colab import files
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

# 📌 3. دریافت فایل آموزش
print("⬆️ لطفاً فایل آموزش (train.xlsx) را آپلود کنید:")
uploaded_train = files.upload()
train_path = list(uploaded_train.keys())[0]
df_train = pd.read_excel(train_path)

# 📌 4. آماده‌سازی داده
if 'Profit' in df_train.columns:
    df_train = df_train.drop(columns=['Profit'])

X = df_train.drop(columns=["Result"])
y = df_train["Result"]
feature_columns = X.columns.tolist()

# 📌 5. تقسیم داده‌ها
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)

# 📌 6. تعریف مدل‌ها
models = {
    "LightGBM": LGBMClassifier(random_state=42),
    "XGBoost": XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss'),
    "RandomForest": RandomForestClassifier(random_state=42)
}

# 📌 7. آموزش و ارزیابی مدل‌ها
f1_scores = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_valid)
    f1 = f1_score(y_valid, preds, average="weighted")
    f1_scores[name] = f1
    print(f"🔍 {name} F1-Score: {f1:.4f}")
    print(classification_report(y_valid, preds))
    print("-" * 40)

# 📌 8. انتخاب بهترین مدل
best_model_name = max(f1_scores, key=f1_scores.get)
best_model = models[best_model_name]
print(f"✅ بهترین مدل انتخاب‌شده: {best_model_name}")

# 📌 9. رسم Confusion Matrix مدل نهایی
from sklearn.metrics import ConfusionMatrixDisplay
ConfusionMatrixDisplay.from_estimator(best_model, X_valid, y_valid, display_labels=np.unique(y), cmap='Blues')
plt.title("Confusion Matrix")
plt.grid(False)
plt.show()

# 📌 10. آپلود فایل تست
print("⬆️ لطفاً فایل تست (test.xlsx) را آپلود کنید:")
uploaded_test = files.upload()
test_path = list(uploaded_test.keys())[0]
df_test = pd.read_excel(test_path)

# 📌 11. پیش‌بینی روی فایل تست
df_test_input = df_test[feature_columns]
test_preds = best_model.predict(df_test_input)
df_test["Result"] = test_preds

# 📌 12. ذخیره فایل خروجی
output_path = "predicted_result.xlsx"
df_test.to_excel(output_path, index=False)

# 📌 13. دانلود فایل خروجی
files.download(output_path)
